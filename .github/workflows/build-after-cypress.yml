name: Build e Deploy dopo Cypress

on:
  workflow_run:
    workflows: ["Cypress Tests"]
    types:
      - completed
    branches: [main]

# Permessi necessari per GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Prevenire deploy multipli contemporanei
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  check-cypress-success:
    name: Verifica successo Cypress
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      deploy-ready: ${{ steps.check.outputs.ready }}
    
    steps:
      - name: Verifica stato workflow
        id: check
        run: |
          echo "Cypress workflow completato con successo"
          echo "ready=true" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: Build e Deploy Angular
    runs-on: ubuntu-latest
    needs: check-cypress-success
    if: needs.check-cypress-success.outputs.deploy-ready == 'true'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout codice
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Installa dipendenze
        run: npm ci

      - name: Build produzione
        run: |
          npm run build -- --configuration=production --base-href=/${{ github.event.repository.name }}/
        env:
          NODE_ENV: production
          
      - name: Verifica struttura build
        run: |
          echo "üìÇ Contenuto directory principale:"
          ls -la
          
          echo "üìÇ Cerco directory di build..."
          find . -name "index.html" -type f | head -5
          
          # Verifica possibili directory di output
          if [ -d "dist" ]; then
            echo "‚úÖ Directory dist trovata"
            BUILD_DIR="dist"
          elif [ -d "build" ]; then
            echo "‚úÖ Directory build trovata"
            BUILD_DIR="build"
          else
            echo "‚ùå Nessuna directory di build trovata"
            exit 1
          fi
          
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          
          echo "üì¶ Contenuto directory build ($BUILD_DIR):"
          ls -la $BUILD_DIR/
          
      - name: Ottimizza per GitHub Pages
        run: |
          # Usa la directory di build trovata
          BUILD_DIR=${{ env.BUILD_DIR }}
          
          # Verifica che index.html esista
          if [ ! -f "$BUILD_DIR/index.html" ]; then
            echo "‚ùå File index.html non trovato in $BUILD_DIR"
            exit 1
          fi
          
          # Crea 404.html per SPA routing
          cp $BUILD_DIR/index.html $BUILD_DIR/404.html
          
          # Crea .nojekyll per evitare processing Jekyll
          touch $BUILD_DIR/.nojekyll
          
          # Log delle dimensioni build
          echo "üì¶ Dimensioni build:"
          du -sh $BUILD_DIR/
          ls -la $BUILD_DIR/

      - name: Prepara build per IIS
        run: |
          BUILD_DIR=${{ env.BUILD_DIR }}
          
          # Crea web.config per IIS
          cat > $BUILD_DIR/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <rewrite>
                <rules>
                  <rule name="Angular Routes" stopProcessing="true">
                    <match url=".*" />
                    <conditions logicalGrouping="MatchAll">
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                      <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="/" />
                  </rule>
                </rules>
              </rewrite>
              <staticContent>
                <remove fileExtension=".json" />
                <mimeMap fileExtension=".json" mimeType="application/json" />
                <remove fileExtension=".woff" />
                <mimeMap fileExtension=".woff" mimeType="application/font-woff" />
                <remove fileExtension=".woff2" />
                <mimeMap fileExtension=".woff2" mimeType="application/font-woff2" />
              </staticContent>
              <httpCompression>
                <dynamicTypes>
                  <add mimeType="application/json" enabled="true" />
                  <add mimeType="application/javascript" enabled="true" />
                </dynamicTypes>
              </httpCompression>
            </system.webServer>
          </configuration>
          EOF
          
          # Comprimi per IIS deploy
          cd $BUILD_DIR
          zip -r ../angular-app-iis.zip .
          cd ..
          
          echo "‚úÖ Build IIS pronta in angular-app-iis.zip"

      - name: Upload build IIS
        uses: actions/upload-artifact@v4
        with:
          name: angular-app-iis-${{ github.run_number }}
          path: angular-app-iis.zip
          retention-days: 30

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: './${{ env.BUILD_DIR }}'

      - name: Deploy su GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Notifica successo deploy
        if: success()
        run: |
          echo "‚úÖ Deploy completato con successo!"
          echo "üåê URL: ${{ steps.deployment.outputs.page_url }}"

  security-audit:
    name: Audit Sicurezza
    runs-on: ubuntu-latest
    needs: check-cypress-success
    if: needs.check-cypress-success.outputs.deploy-ready == 'true'
    
    steps:
      - name: Checkout codice
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Installa dipendenze
        run: npm ci

      - name: Audit vulnerabilit√†
        run: |
          echo "üîç Controllo vulnerabilit√†..."
          npm audit --audit-level=moderate
          
      - name: Controllo licenze
        run: |
          echo "üìÑ Controllo licenze dipendenze..."
          npx license-checker --summary

  performance-check:
    name: Controllo Performance
    runs-on: ubuntu-latest
    needs: check-cypress-success
    if: needs.check-cypress-success.outputs.deploy-ready == 'true'
    
    steps:
      - name: Checkout codice
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Installa dipendenze
        run: npm ci

      - name: Analisi bundle
        run: |
          echo "üìä Analisi dimensioni bundle..."
          npm run build -- --configuration=production --stats-json
          
          # Installa webpack-bundle-analyzer se non presente
          npm install -g webpack-bundle-analyzer
          
          # Genera report (se stats.json esiste)
          if [ -f "dist/stats.json" ]; then
            webpack-bundle-analyzer dist/stats.json dist --report --mode static
            echo "üìà Report generato in dist/report.html"
          fi

      - name: Upload report performance
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_number }}
          path: dist/report.html
          retention-days: 7
